import re
import shutil
from io import StringIO

import numpy as np
import pytest
from pytest import approx

import pharmpy.tools as tools
from pharmpy.deps import pandas as pd
from pharmpy.tools import read_modelfit_results
from pharmpy.tools.frem.models import calculate_parcov_inits, create_model3b
from pharmpy.tools.frem.results import (
    calculate_results,
    calculate_results_using_bipp,
    get_params,
    psn_frem_results,
)
from pharmpy.tools.frem.tool import check_covariates
from pharmpy.tools.psn_helpers import create_results


def test_check_covariates(load_model_for_test, testdata):
    model = load_model_for_test(testdata / 'nonmem' / 'pheno_real.mod')
    newcov = check_covariates(model, ['WGT', 'APGR'])
    assert newcov == ['WGT', 'APGR']
    newcov = check_covariates(model, ['APGR', 'WGT'])
    assert newcov == ['APGR', 'WGT']
    data = model.dataset
    data['NEW'] = data['WGT']
    model = model.replace(dataset=data)
    with pytest.warns(UserWarning):
        newcov = check_covariates(model, ['APGR', 'WGT', 'NEW'])
    assert newcov == ['APGR', 'WGT']
    with pytest.warns(UserWarning):
        newcov = check_covariates(model, ['NEW', 'APGR', 'WGT'])
    assert newcov == ['NEW', 'APGR']


@pytest.mark.filterwarnings("ignore::UserWarning")
def test_check_covariates_mult_warns(load_model_for_test, testdata):
    # These are separated because capturing the warnings did not work.
    # Possibly because more than one warning is issued
    model = load_model_for_test(testdata / 'nonmem' / 'pheno_real.mod')
    newcov = check_covariates(model, ['FA1', 'FA2'])
    assert newcov == []


def test_parcov_inits(load_model_for_test, testdata):
    model = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_3.mod')
    res = read_modelfit_results(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_3.mod')
    params = calculate_parcov_inits(model, res.individual_estimates, 2)
    assert params == approx(
        {
            'OMEGA_3_1': 0.02560327,
            'OMEGA_3_2': -0.001618381,
            'OMEGA_4_1': -0.06764814,
            'OMEGA_4_2': 0.02350935,
        }
    )


def test_create_model3b(load_model_for_test, testdata):
    model3 = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_3.mod')
    model3_res = read_modelfit_results(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_3.mod')
    model1b = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_1b.mod')
    model3b = create_model3b(model1b, model3, model3_res, 2)
    pset = model3b.parameters
    assert pset['OMEGA_3_1'].init == approx(0.02560327)
    assert pset['pCL'].init == 0.00469555
    assert model3b.name == 'model_3b'


def test_bipp_covariance(load_model_for_test, testdata):
    model = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_4.mod')
    res = read_modelfit_results(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_4.mod')
    res = calculate_results_using_bipp(
        model, res, continuous=['APGR', 'WGT'], categorical=[], seed=9532
    )
    assert res


def test_frem_results_pheno(load_model_for_test, testdata):
    model = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_4.mod')
    res = read_modelfit_results(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_4.mod')
    rng = np.random.default_rng(39)
    res = calculate_results(
        model, res, continuous=['APGR', 'WGT'], categorical=[], samples=10, seed=rng
    )

    correct = """parameter,covariate,condition,p5,mean,p95
CL,APGR,5th,0.8288488608444363,0.9074045893682114,0.9858796450612196
CL,APGR,95th,1.0068228455879822,1.0488511518738075,1.093281227789643
CL,WGT,5th,0.9694203299085568,1.0474941162745615,1.1166501542103107
CL,WGT,95th,0.7995064294930343,0.9180953133567297,1.0650802007788895
V,APGR,5th,0.9310596253938406,1.00267198852081,1.0911980884776442
V,APGR,95th,0.9594102567258458,0.9999105457239568,1.0345133429235933
V,WGT,5th,0.9158784334501365,0.9540105388582546,1.0032551527623546
V,WGT,95th,0.9935142042688401,1.1039590774143995,1.1951841323342658
"""

    correct = pd.read_csv(StringIO(correct), index_col=[0, 1, 2])
    correct.index.set_names(['parameter', 'covariate', 'condition'], inplace=True)
    pd.testing.assert_frame_equal(res.covariate_effects, correct)

    correct = """ID,parameter,observed,p5,p95
1,CL,0.5547432549476109,0.43348961261822433,0.8885734337433124
1,V,1.8160960655979352,1.038415560980091,2.0584059979022267
2,CL,0.470266113724661,0.32681593526069636,0.8981565746193788
2,V,2.2213515152250167,1.039984602543316,2.609120234511193
3,CL,0.6048549734153286,0.49992113201267513,0.8875194814874251
3,V,1.6399940159772919,1.0366795908887927,1.8244290141609154
4,CL,0.5955397044481454,0.4955973526445758,0.8728316427228399
4,V,1.6484353917187287,1.0406632239663647,1.8419481407065559
5,CL,0.5547432549476109,0.43348961261822433,0.8885734337433124
5,V,1.8160960655979352,1.038415560980091,2.0584059979022267
6,CL,0.6527046558639648,0.5667794531585526,0.8766611206933559
6,V,1.4860459959674077,1.0373748706211716,1.6276075587897056
7,CL,0.6493365773005624,0.5639843319291379,0.8717995669235555
7,V,1.4885912900169234,1.0385576418473659,1.6327414116935448
8,CL,0.5518806756042662,0.43246606281234407,0.88364295126367
8,V,1.8192066681779755,1.039740007946767,2.065048169779077
9,CL,0.5101011580745779,0.37616789401906164,0.8921086822011289
9,V,2.0093873418573915,1.0395160470126212,2.3191497463966617
10,CL,0.5547432549476109,0.43348961261822433,0.8885734337433124
10,V,1.8160960655979352,1.038415560980091,2.0584059979022267
11,CL,0.5518806756042662,0.43246606281234407,0.88364295126367
11,V,1.8192066681779755,1.039740007946767,2.065048169779077
12,CL,0.6017338005198548,0.4986732333092214,0.8825956092605878
12,V,1.6428029985551513,1.0380052497479233,1.8302346055460144
13,CL,0.5986287411393255,0.4974286849733656,0.87769972125922
13,V,1.645616785415111,1.0393331249822289,1.8360742477320648
14,CL,0.5504549350145245,0.4319295177097601,0.8811882341180618
14,V,1.8207639613452735,1.0404030594834202,2.0683838145722557
15,CL,0.5533101191078784,0.432977511798454,0.8861046892192779
15,V,1.817650696000068,1.0390775055043493,2.061722224066369
16,CL,0.46663081967852893,0.32565686853233244,0.8906878727787242
16,V,2.2270610448892993,1.041963601195628,2.6220648926466987
17,CL,0.6510184325366081,0.5653799653164092,0.8742268743709141
17,V,1.4873181029953997,1.03796602440761,1.6301707339130513
18,CL,0.6493365773005624,0.5639843319291379,0.8717995669235555
18,V,1.4885912900169234,1.0385576418473659,1.6327414116935448
19,CL,0.9082662125035582,0.8310122075065142,1.0106880054573328
19,V,0.9932889496846123,0.9303174236596852,1.0796237191040456
20,CL,0.6001792682784761,0.4980505435160942,0.8801441875616561
20,V,1.6442092851138022,1.038668907314366,1.8331501466353606
21,CL,0.5605130348474453,0.43554459548814517,0.8985190970424587
21,V,1.8098908074994613,1.0357732958607366,2.0452374824869164
22,CL,0.5114223852709964,0.3766132707560645,0.8945948948044381
22,V,2.0076687100771538,1.0388557962701954,2.315377909642682
23,CL,0.8108370290863273,0.7646639352205663,0.916937163253452
23,V,1.194322088025955,1.022123107194101,1.2474929323782284
24,CL,0.8840823174194126,0.854675104645818,0.9301151115086501
24,V,1.0785120776210764,1.011250682394769,1.117869593975535
25,CL,0.9012449959011728,0.8223670220035078,1.0071322297514371
25,V,0.9958420155519944,0.9290303477657104,1.086821031733323
26,CL,0.4952359358734823,0.33465818929159724,0.9496148728350586
26,V,2.183660209878726,1.0269168646174203,2.5256539618293563
27,CL,0.6646311094940178,0.5766456718568198,0.8938963070671325
27,V,1.4771716864501518,1.032982644556226,1.609874260466992
28,CL,0.4914075703608971,0.33346895551217454,0.9417076041195905
28,V,2.189272931704994,1.028863207767386,2.537865758476358
29,CL,0.5490328677077555,0.4313897855470182,0.8787404828053662
29,V,1.8223225985865346,1.0410666699696614,2.071729231920915
30,CL,0.5154066239499925,0.3779528284492588,0.9020961723209877
30,V,2.0025216438845668,1.036878351093562,2.3041281901591177
31,CL,0.5101011580745779,0.37616789401906164,0.8921086822011289
31,V,2.0093873418573915,1.0395160470126212,2.3191497463966617
32,CL,0.4965186439556987,0.33505561133730877,0.9522656501895078
32,V,2.1817925459489342,1.026269177268675,2.5216071800450006
33,CL,0.5140751112218422,0.37750573781897223,0.8995886226652899
33,V,2.0042358599370567,1.0375369478927028,2.307867156068734
34,CL,0.7190679813649745,0.6510530639761826,0.8854180385840652
34,V,1.3373616351521445,1.0323662716248618,1.434255094837346
35,CL,0.6750270663834927,0.5829715556382153,0.9089453551211611
35,V,1.469607339995171,1.029025256745991,1.5949615835749924
36,CL,0.6577895607808315,0.5710010856117403,0.8840055702201156
36,V,1.4822362109972405,1.0356042173565827,1.619962977573579
37,CL,0.46663081967852893,0.32565686853233244,0.8906878727787242
37,V,2.2270610448892993,1.041963601195628,2.6220648926466987
38,CL,0.5087833516028349,0.37572309035989593,0.8896295592145262
38,V,2.0111074351445737,1.040176845124049,2.322932571427457
39,CL,0.436919726732037,0.28495480675040163,0.9118348001557924
39,V,2.4493773011969093,1.0385141575963242,2.9211939924680537
40,CL,0.7699546293898543,0.716350848536808,0.8776337883709696
40,V,1.214936790586783,1.033884192210639,1.2917664768193302
41,CL,0.5590649932323148,0.4350298639242141,0.8960220511700301
41,V,1.811440126022407,1.0364330324892903,2.048515186737006
42,CL,0.4863491978777795,0.3318904622380135,0.9312695886926392
42,V,2.1967788319031087,1.0314658388226985,2.5543150299472153
43,CL,0.9059197612239268,0.8281204084450751,1.0095012424954923
43,V,0.9941392395525903,0.9298881723261628,1.0820171384650104
44,CL,0.5547432549476109,0.43348961261822433,0.8885734337433124
44,V,1.8160960655979352,1.038415560980091,2.0584059979022267
45,CL,0.8308651728267631,0.7898237499717812,0.893199142622233
45,V,1.1008893826559083,1.0030649072250273,1.1796410652270886
46,CL,0.5061579247643022,0.3748351853668587,0.8846924229524536
46,V,2.014552064617543,1.041500105982675,2.3305314236996444
47,CL,0.48383948298170665,0.3311042244573987,0.9260949050704698
47,V,2.20054155937321,1.032770452650949,2.562612227201982
48,CL,0.5009476352770347,0.37306618485289433,0.8749021390060513
48,V,2.0214590457637964,1.044153267986313,2.3458625959581014
49,CL,0.5087833516028349,0.37572309035989593,0.8896295592145262
49,V,2.0111074351445737,1.040176845124049,2.322932571427457
50,CL,0.5986287411393255,0.4974286849733656,0.87769972125922
50,V,1.645616785415111,1.0393331249822289,1.8360742477320648
51,CL,0.46302362498267097,0.3245022528972069,0.8832827568954145
51,V,2.2327852537698796,1.0439475554658135,2.6351229913801766
52,CL,0.5476144742265739,0.43085077810667793,0.8762996943190706
52,V,1.8238825700754526,1.0417308352483448,2.0750844249014255
53,CL,0.5140751112218422,0.37750573781897223,0.8995886226652899
53,V,2.0042358599370567,1.0375369478927028,2.307867156068734
54,CL,0.5154066239499925,0.3779528284492588,0.9020961723209877
54,V,2.0025216438845668,1.036878351093562,2.3041281901591177
55,CL,0.7079937333419911,0.6414952358016379,0.8707695527412196
55,V,1.3442453042031974,1.035910158591921,1.4476366156834648
56,CL,0.6988955801007979,0.63290104870348,0.8587521691857776
56,V,1.3500087586036706,1.038876297381311,1.4589693873919076
57,CL,0.6143159447902024,0.5036849992131349,0.9024605398866665
57,V,1.631595871114456,1.032715899616291,1.8072148255658451
58,CL,0.5101011580745779,0.37616789401906164,0.8921086822011289
58,V,2.0093873418573915,1.0395160470126212,2.3191497463966617
59,CL,0.5986287411393255,0.4974286849733656,0.87769972125922
59,V,1.645616785415111,1.0393331249822289,1.8360742477320648
"""
    correct = pd.read_csv(StringIO(correct), dtype={0: 'int32'}, index_col=[0, 1])
    correct.index.set_names(['ID', 'parameter'], inplace=True)
    pd.testing.assert_frame_equal(res.individual_effects, correct)

    correct = """parameter,covariate,sd_observed,sd_5th,sd_95th
CL,none,0.1983559931033091,0.15793081714883214,0.23962407552182052
CL,APGR,0.19362660786608385,0.15565528485781976,0.23565966559185106
CL,WGT,0.19328348109779792,0.13084032483014013,0.23780427067855575
CL,all,0.185099734421644,0.12857128068283089,0.2316772394347818
V,none,0.1610490608479292,0.12149570560717345,0.17310053909913395
V,APGR,0.16104004787758217,0.11906009055395723,0.17151705414772797
V,WGT,0.1468992585960289,0.1145264356116571,0.1633490998461721
V,all,0.14574143997630676,0.11324355430994708,0.16278438663353176
"""
    correct = pd.read_csv(StringIO(correct), index_col=[0, 1])
    correct.index.set_names(['parameter', 'covariate'], inplace=True)
    pd.testing.assert_frame_equal(res.unexplained_variability, correct)

    correct = pd.DataFrame(
        {
            'p5': [1.0, 0.7],
            'mean': [6.423729, 1.525424],
            'p95': [9.0, 3.2],
            'stdev': [2.237636, 0.704565],
            'ref': [6.423729, 1.525424],
            'categorical': [False, False],
            'other': [np.nan, np.nan],
        },
        index=['APGR', 'WGT'],
    )
    correct.index.name = 'covariate'
    pd.testing.assert_frame_equal(res.covariate_statistics, correct)


def test_frem_results_pheno_categorical(load_model_for_test, testdata):
    model = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno_cat' / 'model_4.mod')
    res = read_modelfit_results(testdata / 'nonmem' / 'frem' / 'pheno_cat' / 'model_4.mod')
    rng = np.random.default_rng(8978)
    res = calculate_results(
        model, res, continuous=['WGT'], categorical=['APGRX'], samples=10, seed=rng
    )

    correct = """parameter,covariate,condition,p5,mean,p95
CL,WGT,5th,0.8888806479928386,0.9344068474824363,1.0429216842428766
CL,WGT,95th,0.9275380047890988,1.1598301793623595,1.2703988351195366
CL,APGRX,other,0.9915508260440394,1.0837646491987887,1.2173634348518769
V,WGT,5th,0.9765936229688581,1.0120003772784190,1.0739756346907814
V,WGT,95th,0.8694233922131289,0.9798663683220742,1.0494977661151397
V,APGRX,other,0.8545033358481884,0.9090756330508469,0.9559616221673316
"""

    correct = pd.read_csv(StringIO(correct), index_col=[0, 1, 2])
    correct.index.set_names(['parameter', 'covariate', 'condition'], inplace=True)
    pd.testing.assert_frame_equal(res.covariate_effects, correct)

    correct = """ID,parameter,observed,p5,p95
1,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
1,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
2,CL,0.9982280031437448,0.9963915937346052,1.001044243672966
2,V,1.0002361858019588,0.9996705321019457,1.0023990815855455
3,CL,0.9982280031437448,0.9963915937346052,1.001044243672966
3,V,1.0002361858019588,0.9996705321019457,1.0023990815855455
4,CL,0.9573077718907862,0.9149358617636167,1.0268362244163478
4,V,1.0058267874330078,0.9919272607197847,1.0612008300863554
5,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
5,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
6,CL,1.1198435491217265,0.9547645645962481,1.1881158336431126
6,V,0.9085976422437901,0.855064355414568,0.957789916083065
7,CL,1.1043277095093798,0.9322066409829316,1.1887146448927077
7,V,0.9102872994311817,0.8535396960971104,0.9630156598488638
8,CL,0.9775538039511688,0.9547895069246628,1.0136621156761403
8,V,1.0030275905796406,0.99579128927331,1.0312688104638512
9,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
9,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
10,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
10,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
11,CL,0.9775538039511688,0.9547895069246628,1.0136621156761403
11,V,1.0030275905796406,0.99579128927331,1.0312688104638512
12,CL,0.984397205662633,0.9684588915495942,1.0093950894728805
12,V,1.0020962549833665,0.9970826803995897,1.021529589408315
13,CL,0.9707579766809108,0.9413143707818629,1.017990941398883
13,V,1.0039597917474488,0.9945015889322739,1.0411260478578415
14,CL,0.9707580846524858,0.9413144737110017,1.0179909617871041
14,V,1.0039597398327802,0.9945015516374013,1.0411259328046443
15,CL,0.984397205662633,0.9684588915495942,1.0093950894728805
15,V,1.0020962549833665,0.9970826803995897,1.021529589408315
16,CL,0.9775538039511688,0.9547895069246628,1.0136621156761403
16,V,1.0030275905796406,0.99579128927331,1.0312688104638512
17,CL,1.112058541995997,0.9434176273196895,1.187813357025184
17,V,0.9094420814108903,0.8543016602749455,0.9602788763435623
18,CL,1.1043277095093798,0.9322066409829316,1.1887146448927077
18,V,0.9102872994311817,0.8535396960971104,0.9630156598488638
19,CL,1.1043277095093798,0.9322066409829316,1.1887146448927077
19,V,0.9102872994311817,0.8535396960971104,0.9630156598488638
20,CL,0.9775538039511688,0.9547895069246628,1.0136621156761403
20,V,1.0030275905796406,0.99579128927331,1.0312688104638512
21,CL,1.0193394191110992,0.9889676754096377,1.0398193488163914
21,V,0.9974525520566727,0.974550209921862,1.0035650488048375
22,CL,0.9982280031437448,0.9963915937346052,1.001044243672966
22,V,1.0002361858019588,0.9996705321019457,1.0023990815855455
23,CL,1.278561145560325,1.048547708317357,1.4402183968948892
23,V,0.8927014996056475,0.7567676250067886,0.9543384498249149
24,CL,1.2875116337804728,1.0447998902777895,1.4561976503405143
24,V,0.8918726161520479,0.7501095121226353,0.9550317484220464
25,CL,1.0814559146197718,0.8993722377570724,1.1921910165209448
25,V,0.9128276994620533,0.8512581230269294,0.9863864985747671
26,CL,1.1476875524497763,0.9300837994094086,1.3244994512246249
26,V,0.9818242876491968,0.8341896563625997,1.0259255530597293
27,CL,1.175885957445256,1.0381392471762432,1.2616113746617195
27,V,0.9027084993825373,0.8431354134536979,0.9502634232171141
28,CL,1.1239176188679145,0.9393538830305941,1.2690915372667446
28,V,0.9845643436557832,0.8569600526613287,1.021943254906035
29,CL,0.9640094405028626,0.9280307976019484,1.0223821001641527
29,V,1.0048928527141423,0.9932135862088474,1.0511028079354217
30,CL,1.0193394191110992,0.9889676754096377,1.0398193488163914
30,V,0.9974525520566727,0.974550209921862,1.0035650488048375
31,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
31,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
32,CL,1.1557218681759203,0.9270950567611691,1.343504477895859
32,V,0.9809126526774464,0.8267754597773977,1.0272564376102078
33,CL,1.0122531534168406,0.9929339453254553,1.0251357110615875
33,V,0.9983795653196571,0.9837222019678337,1.0022651792878396
34,CL,1.1595936298853569,1.0135959499318568,1.2340764764985548
34,V,0.9043872049318215,0.8519565402856528,0.9524039777299782
35,CL,1.2261492360260002,1.0722995753248208,1.3479587202710146
35,V,0.8976910613647905,0.7984329845328006,0.9502010335597292
36,CL,1.1435270215868598,0.9896371945721567,1.2071427196257194
36,V,0.9060690340346341,0.8546398029732785,0.9545524160474242
37,CL,0.9775538039511688,0.9547895069246628,1.0136621156761403
37,V,1.0030275905796406,0.99579128927331,1.0312688104638512
38,CL,0.984397205662633,0.9684588915495942,1.0093950894728805
38,V,1.0020962549833665,0.9970826803995897,1.021529589408315
39,CL,1.026475342573432,0.9850599091939051,1.0547148816513052
39,V,0.9965263930197235,0.9654871471667734,1.004866631741699
40,CL,1.112058541995997,0.9434176273196895,1.187813357025184
40,V,0.9094420814108903,0.8543016602749455,0.9602788763435623
41,CL,1.0122531534168406,0.9929339453254553,1.0251357110615875
41,V,0.9983795653196571,0.9837222019678337,1.0022651792878396
42,CL,1.0929891262425546,0.9524390801842624,1.198827899604719
42,V,0.9882295642803754,0.8885941936936287,1.0166579437026515
43,CL,1.0966505664884518,0.9211298087918399,1.18974467557879
43,V,0.9111333089443203,0.8527784514139055,0.96981477599534
44,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
44,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
45,CL,1.0890265798617313,0.9101852847076254,1.1909034865933101
45,V,0.911980128603927,0.8520179094439722,0.9779878260361825
46,CL,0.9707579766809108,0.9413143707818629,1.017990941398883
46,V,1.0039597917474488,0.9945015889322739,1.0411260478578415
47,CL,1.0778449935823065,0.9593011575628277,1.165177169111004
47,V,0.990067352893127,0.9049799513007414,1.0140255662370024
48,CL,0.9440437853762491,0.889301249526966,1.0359356543164355
48,V,1.0076972748297237,0.9893596417011579,1.0817671034842347
49,CL,0.984397205662633,0.9684588915495942,1.0093950894728805
49,V,1.0020962549833665,0.9970826803995897,1.021529589408315
50,CL,0.9707579766809108,0.9413143707818629,1.017990941398883
50,V,1.0039597917474488,0.9945015889322739,1.0411260478578415
51,CL,0.9573077718907862,0.9149358617636167,1.0268362244163478
51,V,1.0058267874330078,0.9919272607197847,1.0612008300863554
52,CL,0.9573077718907862,0.9149358617636167,1.0268362244163478
52,V,1.0058267874330078,0.9919272607197847,1.0612008300863554
53,CL,1.0122531534168406,0.9929339453254553,1.0251357110615875
53,V,0.9983795653196571,0.9837222019678337,1.0022651792878396
54,CL,1.0193394191110992,0.9889676754096377,1.0398193488163914
54,V,0.9974525520566727,0.974550209921862,1.0035650488048375
55,CL,1.112058541995997,0.9434176273196895,1.187813357025184
55,V,0.9094420814108903,0.8543016602749455,0.9602788763435623
56,CL,1.0739378789217238,0.8886886227193302,1.1936073485795418
56,V,0.9136760580307196,0.8504990592696858,0.994892338927509
57,CL,1.0408973539422075,0.9774179040022573,1.0851535618204715
57,V,0.9946766605413693,0.9476823542166756,1.0074749102503402
58,CL,0.9912884661387944,0.9823252452775585,1.005189333353676
58,V,1.0011657907076288,0.9983757554340882,1.0119068964710976
59,CL,0.9707579766809108,0.9413143707818629,1.017990941398883
59,V,1.0039597917474488,0.9945015889322739,1.0411260478578415
"""

    correct = pd.read_csv(StringIO(correct), dtype={0: 'int32'}, index_col=[0, 1])
    correct.index.set_names(['ID', 'parameter'], inplace=True)
    pd.testing.assert_frame_equal(res.individual_effects, correct)

    correct = """parameter,covariate,sd_observed,sd_5th,sd_95th
CL,none,0.1876414133393799,0.1211647441717813,0.2252670442425513
CL,WGT,0.1824855585272548,0.1000742727854050,0.1989308616423449
CL,APGRX,0.1785985176170080,0.1194859118429075,0.2170526201633760
CL,all,0.1718672014845674,0.0990338088120116,0.1924954360156897
V,none,0.1509307788358624,0.1479980261201491,0.2017978735550682
V,WGT,0.1509045294791560,0.1368087748774919,0.2012032522786724
V,APGRX,0.1442982672200497,0.1410511910779913,0.1937071465967700
V,all,0.1441532460182698,0.1281115989110297,0.1928352776311023
"""

    correct = pd.read_csv(StringIO(correct), index_col=[0, 1])
    correct.index.set_names(['parameter', 'covariate'], inplace=True)
    pd.testing.assert_frame_equal(res.unexplained_variability, correct)

    correct = pd.DataFrame(
        {
            'p5': [0.7, 0],
            'mean': [1.525424, 0.711864],
            'p95': [3.2, 1],
            'stdev': [0.704565, 0.456782],
            'ref': [1.525424, 1.0],
            'categorical': [False, True],
            'other': [np.nan, 0],
        },
        index=['WGT', 'APGRX'],
    )
    correct.index.name = 'covariate'
    pd.testing.assert_frame_equal(res.covariate_statistics, correct)


def test_get_params(load_model_for_test, create_model_for_test, testdata):
    model_frem = load_model_for_test(testdata / 'nonmem' / 'frem' / 'pheno' / 'model_4.mod')
    dist = model_frem.random_variables.etas[-1]
    rvs = list(dist.names)
    npars = 2

    param_names = get_params(model_frem, rvs, npars)
    assert param_names == ['CL', 'V']

    model_multiple_etas = re.sub(r'(V=TVV\*EXP\(ETA\(2\)\))', r'\1*EXP(ETA(3))', model_frem.code)

    model = create_model_for_test(model_multiple_etas)
    model = model.replace(dataset=model_frem.dataset)
    dist = model.random_variables.etas[-1]
    rvs = list(dist.names)
    npars = 3

    param_names = get_params(model, rvs, npars)
    assert param_names == ['CL', 'V(1)', 'V(2)']

    model_separate_declare = re.sub(
        r'(V=TVV\*EXP\(ETA\(2\)\))',
        'ETA2=ETA(2)\n      V=TVV*EXP(ETA2)',
        model_frem.code,
    )

    model = create_model_for_test(model_separate_declare)
    model = model.replace(dataset=model_frem.dataset)
    dist = model.random_variables.etas[-1]
    rvs = list(dist.names)
    npars = 2

    param_names = get_params(model, rvs, npars)
    print(param_names)
    assert param_names == ['CL', 'V']


def test_psn_frem_results(testdata):
    res = psn_frem_results(testdata / 'psn' / 'frem_dir1', method='bipp')
    ofv = res.ofv['ofv']
    assert len(ofv) == 5
    assert ofv['model_1'] == approx(730.894727)
    assert ofv['model_2'] == approx(896.974324)
    assert ofv['model_3'] == approx(868.657803)
    assert ofv['model_3b'] == approx(852.803483)
    assert ofv['model_4'] == approx(753.302743)

    correct = """model type		TVCL  TVV  IVCL  OMEGA_2_1  IVV  OMEGA_3_1  OMEGA_3_2  BSV_APGR  OMEGA_4_1  OMEGA_4_2  OMEGA_4_3  BSV_WGT  SIGMA_1_1
model_1  init      0.004693   1.00916    0.030963         NaN    0.031128         NaN         NaN         NaN         NaN         NaN         NaN         NaN    0.013241
model_1  estimate  0.005818   1.44555    0.111053         NaN    0.201526         NaN         NaN         NaN         NaN         NaN         NaN         NaN    0.016418
model_2  init           NaN       NaN         NaN         NaN         NaN         NaN         NaN    1.000000         NaN         NaN    0.244579    1.000000         NaN
model_2  estimate       NaN       NaN         NaN         NaN         NaN         NaN         NaN    1.000000         NaN         NaN    0.244579    1.000000         NaN
model_3  init           NaN       NaN    0.115195    0.007066    0.209016   -0.010583    0.107027    1.000008    0.171529    0.404278    0.244448    1.002173         NaN
model_3  estimate       NaN       NaN    0.115195    0.007066    0.209016   -0.010583    0.107027    1.000010    0.171529    0.404278    0.244448    1.002170         NaN
model_3b init      0.005818   1.44555    0.125999    0.020191    0.224959   -0.012042    0.115427    1.000032    0.208475    0.415588    0.244080    1.007763    0.016418
model_3b estimate  0.005818   1.44555    0.126000    0.020191    0.224959   -0.012042    0.115427    1.000030    0.208475    0.415588    0.244080    1.007760    0.016418
model_4  init      0.005818   1.44555    0.126000    0.020191    0.224959   -0.012042    0.115427    1.000030    0.208475    0.415588    0.244080    1.007760    0.016418
model_4  estimate  0.007084   1.38635    0.220463    0.195326    0.176796    0.062712    0.117271    1.039930    0.446939    0.402075    0.249237    1.034610    0.015250
"""  # noqa E501
    correct = pd.read_csv(StringIO(correct), index_col=[0, 1], sep=r'\s+')
    pd.testing.assert_frame_equal(res.parameter_inits_and_estimates, correct, rtol=1e-4)

    pc = res.base_parameter_change
    assert len(pc) == 5
    assert pc['TVCL'] == 21.77321763763502
    assert pc['TVV'] == -4.095327038151563
    assert pc['IVCL'] == pytest.approx(98.52052623522104, abs=1e-12)
    assert pc['IVV'] == -12.271369451088198
    assert pc['SIGMA_1_1'] == pytest.approx(-7.110618417927009, abs=1e-12)

    correct = """,mean,stdev
APGR,6.42372,2.237640
WGT,1.525424,0.704565
"""
    correct = pd.read_csv(StringIO(correct), index_col=[0])
    pd.testing.assert_frame_equal(res.estimated_covariates, correct, rtol=1e-5)

    correct = """condition,parameter,CL,V
all,CL,0.025328,0.022571
all,V,0.022571,0.020115
APGR,CL,0.216681,0.188254
APGR,V,0.188254,0.163572
WGT,CL,0.027391,0.021634
WGT,V,0.021634,0.020540
"""
    correct = pd.read_csv(StringIO(correct), index_col=[0, 1])
    pd.testing.assert_frame_equal(res.parameter_variability, correct, rtol=1e-4)

    correct = """condition,parameter,APGR,WGT
all,CL,-0.020503,0.628814
all,V,0.00930905,0.544459
each,CL,0.0269498,0.613127
each,V,0.0503961,0.551581
"""

    correct = pd.read_csv(StringIO(correct), index_col=[0, 1])
    pd.testing.assert_frame_equal(res.coefficients, correct, rtol=1e-5)


def test_create_results(testdata):
    res = create_results(testdata / 'psn' / 'frem_dir1', method='bipp')
    ofv = res.ofv['ofv']
    assert len(ofv) == 5


def test_modeling_create_results(testdata):
    res = tools.run.create_results(testdata / 'psn' / 'frem_dir1', method='bipp')
    ofv = res.ofv['ofv']
    assert len(ofv) == 5


def test_create_report(testdata, tmp_path):
    res = tools.read_results(testdata / 'frem' / 'results.json')
    shutil.copy(testdata / 'frem' / 'results.json', tmp_path)
    tools.create_report(res, tmp_path)
    html = tmp_path / 'results.html'
    assert html.is_file()
    assert html.stat().st_size > 500000
